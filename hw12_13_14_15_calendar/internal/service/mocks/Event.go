// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/randomurban/hw-test/hw12_13_14_15_calendar/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Event is an autogenerated mock type for the Event type
type Event struct {
	mock.Mock
}

type Event_Expecter struct {
	mock *mock.Mock
}

func (_m *Event) EXPECT() *Event_Expecter {
	return &Event_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, event
func (_m *Event) Create(ctx context.Context, event model.Event) (model.EventID, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.EventID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) (model.EventID, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Event) model.EventID); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Get(0).(model.EventID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Event_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - event model.Event
func (_e *Event_Expecter) Create(ctx interface{}, event interface{}) *Event_Create_Call {
	return &Event_Create_Call{Call: _e.mock.On("Create", ctx, event)}
}

func (_c *Event_Create_Call) Run(run func(ctx context.Context, event model.Event)) *Event_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Event))
	})
	return _c
}

func (_c *Event_Create_Call) Return(_a0 model.EventID, _a1 error) *Event_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_Create_Call) RunAndReturn(run func(context.Context, model.Event) (model.EventID, error)) *Event_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Event) Delete(ctx context.Context, id model.EventID) (bool, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Event_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.EventID
func (_e *Event_Expecter) Delete(ctx interface{}, id interface{}) *Event_Delete_Call {
	return &Event_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *Event_Delete_Call) Run(run func(ctx context.Context, id model.EventID)) *Event_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.EventID))
	})
	return _c
}

func (_c *Event_Delete_Call) Return(_a0 bool, _a1 error) *Event_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_Delete_Call) RunAndReturn(run func(context.Context, model.EventID) (bool, error)) *Event_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Event) GetByID(ctx context.Context, id model.EventID) (*model.Event, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID) (*model.Event, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID) *model.Event); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EventID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type Event_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.EventID
func (_e *Event_Expecter) GetByID(ctx interface{}, id interface{}) *Event_GetByID_Call {
	return &Event_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *Event_GetByID_Call) Run(run func(ctx context.Context, id model.EventID)) *Event_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.EventID))
	})
	return _c
}

func (_c *Event_GetByID_Call) Return(_a0 *model.Event, _a1 error) *Event_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_GetByID_Call) RunAndReturn(run func(context.Context, model.EventID) (*model.Event, error)) *Event_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDay provides a mock function with given fields: ctx, date
func (_m *Event) GetDay(ctx context.Context, date time.Time) (*[]model.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetDay")
	}

	var r0 *[]model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*[]model.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *[]model.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_GetDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDay'
type Event_GetDay_Call struct {
	*mock.Call
}

// GetDay is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *Event_Expecter) GetDay(ctx interface{}, date interface{}) *Event_GetDay_Call {
	return &Event_GetDay_Call{Call: _e.mock.On("GetDay", ctx, date)}
}

func (_c *Event_GetDay_Call) Run(run func(ctx context.Context, date time.Time)) *Event_GetDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *Event_GetDay_Call) Return(_a0 *[]model.Event, _a1 error) *Event_GetDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_GetDay_Call) RunAndReturn(run func(context.Context, time.Time) (*[]model.Event, error)) *Event_GetDay_Call {
	_c.Call.Return(run)
	return _c
}

// GetMonth provides a mock function with given fields: ctx, date
func (_m *Event) GetMonth(ctx context.Context, date time.Time) (*[]model.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetMonth")
	}

	var r0 *[]model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*[]model.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *[]model.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_GetMonth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMonth'
type Event_GetMonth_Call struct {
	*mock.Call
}

// GetMonth is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *Event_Expecter) GetMonth(ctx interface{}, date interface{}) *Event_GetMonth_Call {
	return &Event_GetMonth_Call{Call: _e.mock.On("GetMonth", ctx, date)}
}

func (_c *Event_GetMonth_Call) Run(run func(ctx context.Context, date time.Time)) *Event_GetMonth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *Event_GetMonth_Call) Return(_a0 *[]model.Event, _a1 error) *Event_GetMonth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_GetMonth_Call) RunAndReturn(run func(context.Context, time.Time) (*[]model.Event, error)) *Event_GetMonth_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeek provides a mock function with given fields: ctx, date
func (_m *Event) GetWeek(ctx context.Context, date time.Time) (*[]model.Event, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetWeek")
	}

	var r0 *[]model.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (*[]model.Event, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) *[]model.Event); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_GetWeek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeek'
type Event_GetWeek_Call struct {
	*mock.Call
}

// GetWeek is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *Event_Expecter) GetWeek(ctx interface{}, date interface{}) *Event_GetWeek_Call {
	return &Event_GetWeek_Call{Call: _e.mock.On("GetWeek", ctx, date)}
}

func (_c *Event_GetWeek_Call) Run(run func(ctx context.Context, date time.Time)) *Event_GetWeek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *Event_GetWeek_Call) Return(_a0 *[]model.Event, _a1 error) *Event_GetWeek_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_GetWeek_Call) RunAndReturn(run func(context.Context, time.Time) (*[]model.Event, error)) *Event_GetWeek_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, event
func (_m *Event) Update(ctx context.Context, id model.EventID, event model.Event) (bool, error) {
	ret := _m.Called(ctx, id, event)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID, model.Event) (bool, error)); ok {
		return rf(ctx, id, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.EventID, model.Event) bool); ok {
		r0 = rf(ctx, id, event)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.EventID, model.Event) error); ok {
		r1 = rf(ctx, id, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Event_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Event_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id model.EventID
//   - event model.Event
func (_e *Event_Expecter) Update(ctx interface{}, id interface{}, event interface{}) *Event_Update_Call {
	return &Event_Update_Call{Call: _e.mock.On("Update", ctx, id, event)}
}

func (_c *Event_Update_Call) Run(run func(ctx context.Context, id model.EventID, event model.Event)) *Event_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.EventID), args[2].(model.Event))
	})
	return _c
}

func (_c *Event_Update_Call) Return(_a0 bool, _a1 error) *Event_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Event_Update_Call) RunAndReturn(run func(context.Context, model.EventID, model.Event) (bool, error)) *Event_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewEvent creates a new instance of Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Event {
	mock := &Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
